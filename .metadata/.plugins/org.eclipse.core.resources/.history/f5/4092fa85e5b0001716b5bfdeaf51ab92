package search;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;
import java.util.function.Function;

@SuppressWarnings("unused")
public class Problem<State extends Searchable<State,Action>,Action> {
	
	State initialState;
	State finalState;
	
	
	public boolean goal_test(State s){
		return finalState.equals(s);
	}
	
	public Problem(State start, State stop){
		initialState = start;
		finalState = stop;
	}
	
	public String 	toString() {
		return initialState + "\n" + " V \n\n" + finalState;	
	}
	
	public int bfs(){ //Largeur FILE
		
		LinkedList<State> etats = new LinkedList<State>();
		LinkedList<State> memory = new LinkedList<State>();
		etats.add(initialState);
		int cpt=0;
		
		while (! etats.isEmpty() ) {
			
			State n = etats.poll();
			
			if(goal_test(n)) {
				
				//Afficher les prédécesseurs de l'état final :
				System.out.println(n.toString());

				
				while (n.getPredecessor() != null) {
					
					System.out.println(n.getPredecessor().toString());
					n=n.getPredecessor();
					
				}
				
				System.out.println("-------------------------- \n\n");
				System.out.println("Etats visités en largeur : "+cpt);
				return cpt;
			}
			
			memory.add(n);
			cpt++;
			List<Action> mesactions =  n.getActions();
			 
			
			for (int i=0; i<mesactions.size(); i++) {
				
				Action actual_action = mesactions.get(i);
				
				State actual_sate = n.execute(actual_action);	
				
				actual_sate.setPredecessor(n);
				
				if (! memory.contains(actual_sate) ) { 
					
					etats.addLast(actual_sate);
					
				}
				
			}
		}
		   
		return cpt;

    }
	
	


	public int dfs(){ //Profondeur PILE
		
		   Deque<State> stack = new ArrayDeque<State>(); //Deque gère une pile, trouvé sur la documentation de java
		   Deque<State> memory = new ArrayDeque<State>();	//Fournit les méthodes pop, push,ect..
		   int cpt=0;
		   stack.push(initialState);
		   
		   while (! stack.isEmpty() ) {
			   
			   State v = stack.pop();
			   
			   if (goal_test(v)) {
				   
					System.out.println(v.toString());

					while (v.getPredecessor() != null) {
						
						System.out.println(v.getPredecessor().toString());
						v=v.getPredecessor();
						
					}
				   
				   System.out.println("Etats visités en profondeur : "+cpt);System.out.println("-------------------------- \n\n");return cpt;
			   }
			   		
			   
			   cpt++;

			   if (! memory.contains(v) ) {
				   
				   memory.add(v);
				   
				  List<Action> mesactions =  v.getActions();
				  
				   
				   for(int i=0;i<mesactions.size();i++) {
					   
					   State actual_state=v.execute(mesactions.get(i));
					   stack.push(actual_state); 
					   actual_state.setPredecessor(v);
				   }
			   }
			   
		   }
		
		System.out.println(cpt);
        return cpt;
    }
	
	public int aStar(Function<State,Double> g, Function<State,Double> h ){
		// to be completed
        return 0;
    }
	

}
